<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\hitobit as Exchange;
use React\Async;
use React\Promise\PromiseInterface;

class hitobit extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'hitobit',
            'name' => 'Hitobit',
            'country' => array( 'IR' ),
            'rateLimit' => 1000,
            'version' => '1',
            'certified' => false,
            'pro' => false,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'cancelAllOrders' => false,
                'cancelOrder' => false,
                'cancelOrders' => false,
                'createDepositAddress' => false,
                'createOrder' => false,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'editOrder' => false,
                'fetchBalance' => false,
                'fetchBorrowInterest' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchClosedOrders' => false,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => false,
                'fetchDepositAddress' => false,
                'fetchDeposits' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedBorrowRate' => false,
                'fetchIsolatedBorrowRates' => false,
                'fetchL2OrderBook' => false,
                'fetchLedger' => false,
                'fetchLedgerEntry' => false,
                'fetchLeverageTiers' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => false,
                'fetchOHLCV' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => false,
                'fetchOrder' => false,
                'fetchOrderBook' => true,
                'fetchOrders' => false,
                'fetchOrderTrades' => 'emulated',
                'fetchPositions' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => false,
                'fetchTrades' => false,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchWithdrawals' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'comment' => 'This comment is optional',
            'urls' => array(
                'logo' => 'https://cdn.arz.digital/cr-odin/img/exchanges/hitobit/64x64.png',
                'api' => array(
                    'public' => 'https://hitobit.com',
                ),
                'www' => 'https://hitobit.com/',
                'doc' => array(
                    'https://hitobit.com/',
                ),
            ),
            'timeframes' => array(
                '1m' => 'OneMinute',
                '5m' => 'FiveMinutes',
                '15m' => 'FifteenMinutes',
                '30m' => 'ThirtyMinutes',
                '1h' => 'OneHour',
                '1d' => 'OneDay',
                '1w' => 'OneWeek',
                '1M' => 'OneMonth',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'hapi/exchange/v1/public/alltickers/24hr' => 1,
                        'hapi/exchange/v1/public/ticker/24hr' => 1,
                        'hapi/exchange/v1/public/klines' => 1,
                        'hapi/exchange/v1/public/depth' => 1,
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => $this->parse_number('0.001'),
                    'taker' => $this->parse_number('0.001'),
                ),
            ),
        ));
    }

    public function fetch_markets(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            /**
             * retrieves data on all markets for hitobit
             * @see https://hitobit-docs.github.io/#general-info
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} an array of objects representing $market data
             */
            $response = Async\await($this->publicGetHapiExchangeV1PublicAlltickers24hr ($params));
            $result = array();
            for ($i = 0; $i < count($response); $i++) {
                $market = Async\await($this->parse_market($response[$i]));
                $result[] = $market;
            }
            return $result;
        }) ();
    }

    public function parse_market($market): array {
        // array(
        //     'symbol' => 'ENSIRT',
        //     'baseCurrencySymbol' => 'ENS',
        //     'quoteCurrencySymbol' => 'IRT',
        //     'symbolPublicOfferingDate' => 1676263272189,
        //     'isHighlight' => false,
        //     'priceChange' => -141761,
        //     'priceChangePercent' => -9.9,
        //     'weightedAveragePrice' => 1302802.5923348605,
        //     'lastPrice' => 1290756,
        //     'lastQuantity' => 0.06698461538461538,
        //     'openPrice' => 1432517,
        //     'highPrice' => 1441389,
        //     'lowPrice' => 1171122,
        //     'openTime' => 1717762920000,
        //     'closeTime' => 1717849320000,
        //     'firstTradeId' => 9167561172598788,
        //     'lastTradeId' => 9180948480278536,
        //     'totalTrades' => 9210,
        //     'prevDayClosePrice' => 1286855,
        //     'bidPrice' => 1288866,
        //     'bidQuantity' => 31.0938,
        //     'askPrice' => 1290107,
        //     'askQuantity' => 1.8,
        //     'baseVolume' => 7544.726084104318,
        //     'quoteVolume' => 9829288700.827547,
        //     'smartTradeEngine' => true,
        //     'lastMarketInfoChangeDate' => 1717849693023,
        // ),
        $id = $this->safe_string($market, 'symbol');
        $baseId = $this->safe_string($market, 'baseCurrencySymbol');
        $quoteId = $this->safe_string($market, 'quoteCurrencySymbol');
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $baseId = strtolower($baseId);
        $quoteId = strtolower($quoteId);
        return array(
            'id' => $id,
            'symbol' => $base . '/' . $quote,
            'base' => $base,
            'quote' => $quote,
            'settle' => null,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => null,
            'type' => 'spot',
            'spot' => true,
            'margin' => false,
            'swap' => false,
            'future' => false,
            'option' => false,
            'active' => true,
            'contract' => false,
            'linear' => null,
            'inverse' => null,
            'contractSize' => null,
            'expiry' => null,
            'expiryDatetime' => null,
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => null,
                'price' => null,
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => null,
                    'max' => null,
                ),
                'amount' => array(
                    'min' => null,
                    'max' => null,
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
            'created' => null,
            'info' => $market,
        );
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
             * @see https://hitobit-docs.github.io/#general-info
             * @param {string[]|null} $symbols unified $symbols of the markets to fetch the $ticker for, all market tickers are returned if not assigned
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structures~
             */
            Async\await($this->load_markets());
            if ($symbols !== null) {
                $symbols = $this->market_symbols($symbols);
            }
            $response = Async\await($this->publicGetHapiExchangeV1PublicAlltickers24hr ($params));
            $result = array();
            for ($i = 0; $i < count($response); $i++) {
                $ticker = Async\await($this->parse_ticker($response[$i]));
                $symbol = $ticker['symbol'];
                $result[$symbol] = $ticker;
            }
            return $this->filter_by_array_tickers($result, 'symbol', $symbols);
        }) ();
    }

    public function fetch_ticker(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetches a price $ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
             * @see https://hitobit-docs.github.io/#general-info
             * @param {string} $symbol unified $symbol of the $market to fetch the $ticker for
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $response = Async\await($this->publicGetHapiExchangeV1PublicTicker24hr ($request));
            $ticker = Async\await($this->parse_ticker($response));
            return $ticker;
        }) ();
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        // array(
        //     'symbol' => 'ENSIRT',
        //     'baseCurrencySymbol' => 'ENS',
        //     'quoteCurrencySymbol' => 'IRT',
        //     'symbolPublicOfferingDate' => 1676263272189,
        //     'isHighlight' => false,
        //     'priceChange' => -141761,
        //     'priceChangePercent' => -9.9,
        //     'weightedAveragePrice' => 1302802.5923348605,
        //     'lastPrice' => 1290756,
        //     'lastQuantity' => 0.06698461538461538,
        //     'openPrice' => 1432517,
        //     'highPrice' => 1441389,
        //     'lowPrice' => 1171122,
        //     'openTime' => 1717762920000,
        //     'closeTime' => 1717849320000,
        //     'firstTradeId' => 9167561172598788,
        //     'lastTradeId' => 9180948480278536,
        //     'totalTrades' => 9210,
        //     'prevDayClosePrice' => 1286855,
        //     'bidPrice' => 1288866,
        //     'bidQuantity' => 31.0938,
        //     'askPrice' => 1290107,
        //     'askQuantity' => 1.8,
        //     'baseVolume' => 7544.726084104318,
        //     'quoteVolume' => 9829288700.827547,
        //     'smartTradeEngine' => true,
        //     'lastMarketInfoChangeDate' => 1717849693023,
        // ),
        $marketType = 'spot';
        $marketId = $this->safe_string($ticker, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market, null, $marketType);
        $high = $this->safe_float($ticker, 'highPrice', 0);
        $low = $this->safe_float($ticker, 'lowPrice', 0);
        $bid = $this->safe_float($ticker, 'bidPrice', 0);
        $ask = $this->safe_float($ticker, 'askPrice', 0);
        $last = $this->safe_float($ticker, 'lastPrice', 0);
        $change = $this->safe_float($ticker, 'priceChangePercent', 0);
        $baseVolume = $this->safe_float($ticker, 'baseVolume', 0);
        $quoteVolume = $this->safe_float($ticker, 'quoteVolume', 0);
        $timestamp = $this->safe_integer($ticker, 'closeTime');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => new Date ($timestamp).toISOString (),
            'high' => $high,
            'low' => $low,
            'bid' => $bid,
            'bidVolume' => null,
            'ask' => $ask,
            'askVolume' => null,
            'vwap' => null,
            'open' => $last,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => $change,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $timeframe, $since, $limit, $params) {
            /**
             * fetches historical candlestick data containing the open, high, low, and close price, and the volume of a $market
             * @see https://hitobit-docs.github.io/#general-info
             * @param {string} $symbol unified $symbol of the $market to fetch OHLCV data for
             * @param {string} $timeframe the length of time each candle represents
             * @param {int} [$since] timestamp in ms of the earliest candle to fetch
             * @param {int} [$limit] the maximum amount of candles to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {int[][]} A list of candles ordered, open, high, low, close, volume
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $endTime = Date.now ();
            $request = array(
                'symbol' => $market['id'],
                'from' => new Date (($endTime) - (24 * 60 * 60)).toISOString (),
                'to' => new Date ($endTime).toISOString (),
                'interval' => $this->safe_string($this->timeframes, $timeframe, $timeframe),
                'limit' => 300,
            );
            if ($since !== null) {
                $request['from'] = new Date ($since / 1000).toISOString ();
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            if ($timeframe !== null) {
                $request['interval'] = $this->safe_string($this->timeframes, $timeframe, $timeframe);
            }
            $response = Async\await($this->publicGetHapiExchangeV1PublicKlines ($request));
            $ohlcvs = array();
            for ($i = 0; $i < count($response); $i++) {
                $ohlcvs[] = [
                    $this->safe_value($response[$i], 'closeTime'),
                    $this->safe_value($response[$i], 'open'),
                    $this->safe_value($response[$i], 'high'),
                    $this->safe_value($response[$i], 'low'),
                    $this->safe_value($response[$i], 'close'),
                    $this->safe_value($response[$i], 'baseVolume'),
                ];
            }
            return $this->parse_ohlcvs($ohlcvs, $market, $timeframe, $since, $limit);
        }) ();
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $limit, $params) {
            /**
             * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data for multiple markets
             * @see https://hitobit-docs.github.io/#general-info
             * @param {string[]|null} symbols list of unified $market symbols, all symbols fetched if null, default is null
             * @param {int} [$limit] max number of entries per orderbook to return, default is null
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market $symbol
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
                'limit' => 30,
            );
            $orderBook = Async\await($this->publicGetHapiExchangeV1PublicDepth ($request));
            $timestamp = Date.now ();
            return $this->parse_order_book($orderBook, $symbol, $timestamp, 'bids', 'asks');
        }) ();
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $query = $this->omit($params, $this->extract_params($path));
        $url = $this->urls['api']['public'] . '/' . $path . '?' . $this->urlencode($query);
        $headers = array( 'Content-Type' => 'application/json' );
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
