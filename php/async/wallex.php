<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\wallex as Exchange;
use React\Async;
use React\Promise\PromiseInterface;

class wallex extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'wallex',
            'name' => 'Wallex',
            'country' => array( 'IR' ),
            'rateLimit' => 1000,
            'version' => '1',
            'certified' => false,
            'pro' => false,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'cancelAllOrders' => false,
                'cancelOrder' => false,
                'cancelOrders' => false,
                'createDepositAddress' => false,
                'createOrder' => false,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'editOrder' => false,
                'fetchBalance' => false,
                'fetchBorrowInterest' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchClosedOrders' => false,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => false,
                'fetchDepositAddress' => false,
                'fetchDeposits' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedBorrowRate' => false,
                'fetchIsolatedBorrowRates' => false,
                'fetchL2OrderBook' => false,
                'fetchL3OrderBook' => false,
                'fetchLedger' => false,
                'fetchLedgerEntry' => false,
                'fetchLeverageTiers' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => false,
                'fetchOHLCV' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => false,
                'fetchOrder' => false,
                'fetchOrderBook' => true,
                'fetchOrders' => false,
                'fetchOrderTrades' => 'emulated',
                'fetchPositions' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => false,
                'fetchTrades' => false,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchWithdrawals' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'comment' => 'This comment is optional',
            'urls' => array(
                'logo' => 'https://cdn.arz.digital/cr-odin/img/exchanges/wallex/64x64.png',
                'api' => array(
                    'public' => 'https://api.wallex.ir',
                ),
                'www' => 'https://wallex.ir',
                'doc' => array(
                    'https://api-docs.wallex.ir',
                ),
            ),
            'timeframes' => array(
                '1m' => '1',
                '1h' => '60',
                '3h' => '180',
                '6h' => '360',
                '12h' => '720',
                '1d' => '1D',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'v1/markets' => 1,
                        'v1/currencies/stats' => 1,
                        'v1/depth' => 1,
                        'v1/udf/history' => 1,
                    ),
                ),
            ),
            'commonCurrencies' => array(
                'TMN' => 'IRT',
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => $this->parse_number('0.001'),
                    'taker' => $this->parse_number('0.001'),
                ),
            ),
        ));
    }

    public function fetch_markets(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            /**
             * retrieves data on all $markets for wallex
             * @see https://api-docs.wallex.ir/#be8d9c51a2
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} an array of objects representing $market data
             */
            $response = Async\await($this->publicGetV1Markets ($params));
            $markets = $this->safe_dict($response, 'result');
            $marketList = $this->safe_dict($markets, 'symbols');
            $marketKeys = is_array($marketList) ? array_keys($marketList) : array();
            $result = array();
            for ($i = 0; $i < count($marketKeys); $i++) {
                $index = $marketKeys[$i];
                $market = Async\await($this->parse_market($marketList[$index]));
                $result[] = $market;
            }
            return $result;
        }) ();
    }

    public function parse_market($market): array {
        //  array(
        // symbol => "PEPETMN",
        // baseAsset => "PEPE",
        // baseAsset_png_icon => "https://api.wallex.ir/coins/PEPE/icon/png",
        // baseAsset_svg_icon => "https://api.wallex.ir/coins/PEPE/icon/svg",
        // baseAssetPrecision => 8,
        // quoteAsset => "TMN",
        // quoteAsset_png_icon => "https://api.wallex.ir/coins/TMN/icon/png",
        // quoteAsset_svg_icon => "https://api.wallex.ir/coins/TMN/icon/svg",
        // quotePrecision => 0,
        // faName => "پپه - تومان",
        // enName => "Pepe - Toman",
        // faBaseAsset => "پپه",
        // enBaseAsset => "Pepe",
        // faQuoteAsset => "تومان",
        // enQuoteAsset => "Toman",
        // stepSize => 0,
        // tickSize => 4,
        // minQty => 1,
        // minNotional => 100000,
        // stats => array(
        // bidPrice => "0.5800000000000000",
        // askPrice => "0.5810000000000000",
        // 24h_ch => -2.35,
        // 7d_ch => 9.52,
        // 24h_volume => "102899374056.0000000000000000",
        // 7d_volume => "1444394386948.000000000000000",
        // 24h_quoteVolume => "60901904450.9036000000000000",
        // 24h_highPrice => "0.6086000000000000",
        // 24h_lowPrice => "0.5780000000000000",
        // lastPrice => "0.5810000000000000",
        // lastQty => "0.5810000000000000",
        // lastTradeSide => "SELL",
        // bidVolume => "0",
        // askVolume => "0",
        // bidCount => 7052,
        // askCount => 6395,
        // direction => array(
        // SELL => 60,
        // BUY => 40
        // ),
        // 24h_tmnVolume => "60901904450.9036000000000000"
        // ),
        // createdAt => "2023-05-24T00:00:00.000000Z",
        // isNew => false,
        // isZeroFee => false
        // ),
        $id = $this->safe_string($market, 'symbol');
        $baseId = $this->safe_string($market, 'baseAsset');
        $quoteId = $this->safe_string($market, 'quoteAsset');
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $baseId = strtolower($baseId);
        $quoteId = strtolower($quoteId);
        return array(
            'id' => $id,
            'symbol' => $base . '/' . $quote,
            'base' => $base,
            'quote' => $quote,
            'settle' => null,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => null,
            'type' => 'spot',
            'spot' => true,
            'margin' => false,
            'swap' => false,
            'future' => false,
            'option' => false,
            'active' => true,
            'contract' => false,
            'linear' => null,
            'inverse' => null,
            'contractSize' => null,
            'expiry' => null,
            'expiryDatetime' => null,
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => null,
                'price' => null,
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => null,
                    'max' => null,
                ),
                'amount' => array(
                    'min' => null,
                    'max' => null,
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
            'created' => null,
            'info' => $market,
        );
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetches price tickers for multiple $markets, statistical information calculated over the past 24 hours for each market
             * @see https://api-docs.wallex.ir/#be8d9c51a2
             * @param {string[]|null} $symbols unified $symbols of the $markets to fetch the $ticker for, all market tickers are returned if not assigned
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structures~
             */
            Async\await($this->load_markets());
            if ($symbols !== null) {
                $symbols = $this->market_symbols($symbols);
            }
            $response = Async\await($this->publicGetV1Markets ($params));
            $markets = $this->safe_dict($response, 'result');
            $marketList = $this->safe_dict($markets, 'symbols');
            $marketKeys = is_array($marketList) ? array_keys($marketList) : array();
            $result = array();
            for ($i = 0; $i < count($marketKeys); $i++) {
                $index = $marketKeys[$i];
                $ticker = Async\await($this->parse_ticker($marketList[$index]));
                $symbol = $ticker['symbol'];
                $result[$symbol] = $ticker;
            }
            return $this->filter_by_array_tickers($result, 'symbol', $symbols);
        }) ();
    }

    public function fetch_ticker(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetches a price $ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
             * @see https://api-docs.wallex.ir/#be8d9c51a2
             * @param {string} $symbol unified $symbol of the $market to fetch the $ticker for
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $response = Async\await($this->publicGetV1Markets ($params));
            $markets = $this->safe_dict($response, 'result');
            $marketList = $this->safe_dict($markets, 'symbols');
            $ticker = Async\await($this->parse_ticker($marketList[$market['id']]));
            return $ticker;
        }) ();
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        // array(
        // $symbol => "PEPETMN",
        // baseAsset => "PEPE",
        // baseAsset_png_icon => "https://api.wallex.ir/coins/PEPE/icon/png",
        // baseAsset_svg_icon => "https://api.wallex.ir/coins/PEPE/icon/svg",
        // baseAssetPrecision => 8,
        // quoteAsset => "TMN",
        // quoteAsset_png_icon => "https://api.wallex.ir/coins/TMN/icon/png",
        // quoteAsset_svg_icon => "https://api.wallex.ir/coins/TMN/icon/svg",
        // quotePrecision => 0,
        // faName => "پپه - تومان",
        // enName => "Pepe - Toman",
        // faBaseAsset => "پپه",
        // enBaseAsset => "Pepe",
        // faQuoteAsset => "تومان",
        // enQuoteAsset => "Toman",
        // stepSize => 0,
        // tickSize => 4,
        // minQty => 1,
        // minNotional => 100000,
        // $stats => array(
        // bidPrice => "0.5800000000000000",
        // askPrice => "0.5810000000000000",
        // 24h_ch => -2.35,
        // 7d_ch => 9.52,
        // 24h_volume => "102899374056.0000000000000000",
        // 7d_volume => "1444394386948.000000000000000",
        // 24h_quoteVolume => "60901904450.9036000000000000",
        // 24h_highPrice => "0.6086000000000000",
        // 24h_lowPrice => "0.5780000000000000",
        // lastPrice => "0.5810000000000000",
        // lastQty => "0.5810000000000000",
        // lastTradeSide => "SELL",
        // bidVolume => "0",
        // askVolume => "0",
        // bidCount => 7052,
        // askCount => 6395,
        // direction => array(
        // SELL => 60,
        // BUY => 40
        // ),
        // 24h_tmnVolume => "60901904450.9036000000000000"
        // ),
        // createdAt => "2023-05-24T00:00:00.000000Z",
        // isNew => false,
        // isZeroFee => false
        // ),
        $marketType = 'spot';
        $stats = $this->safe_value($ticker, 'stats');
        $marketId = $this->safe_string($ticker, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market, null, $marketType);
        $high = $this->safe_float($stats, '24h_highPrice', 0);
        $low = $this->safe_float($stats, '24h_lowPrice', 0);
        $bid = $this->safe_float($stats, 'bidPrice', 0);
        $ask = $this->safe_float($stats, 'askPrice', 0);
        $last = $this->safe_float($stats, 'lastPrice', 0);
        $quoteVolume = $this->safe_float($stats, '24h_quoteVolume', 0);
        $baseVolume = $this->safe_float($stats, '24h_volume', 0);
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => null,
            'datetime' => null,
            'high' => $high,
            'low' => $low,
            'bid' => $bid,
            'bidVolume' => null,
            'ask' => $ask,
            'askVolume' => null,
            'vwap' => null,
            'open' => null,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $timeframe, $since, $limit, $params) {
            /**
             * fetches historical candlestick data containing the open, high, low, and close price, and the volume of a $market
             * @see https://api-docs.wallex.ir/#be8d9c51a2
             * @param {string} $symbol unified $symbol of the $market to fetch OHLCV data for
             * @param {string} $timeframe the length of time each candle represents
             * @param {int} [$since] timestamp in ms of the earliest candle to fetch
             * @param {int} [$limit] the maximum amount of candles to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {int[][]} A list of candles ordered, open, high, low, close, volume
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $endTime = Date.now ();
            $request = array(
                'symbol' => $market['id'],
                'from' => ($endTime / 1000) - (24 * 60 * 60),
                'to' => $endTime / 1000,
                'resolution' => $this->safe_string($this->timeframes, $timeframe, $timeframe),
                // 'limit' => 500,
            );
            if ($since !== null) {
                $request['from'] = $since / 1000;
            }
            $request['from'] = $this->safe_integer($request, 'from');
            $request['to'] = $this->safe_integer($request, 'to');
            if ($timeframe !== null) {
                $request['resolution'] = $this->safe_string($this->timeframes, $timeframe, $timeframe);
            }
            $response = Async\await($this->publicGetV1UdfHistory ($request));
            $openList = $this->safe_value($response, 'o', array());
            $highList = $this->safe_list($response, 'h', array());
            $lastList = $this->safe_list($response, 'l', array());
            $closeList = $this->safe_list($response, 'c', array());
            $volumeList = $this->safe_list($response, 'v', array());
            $timestampList = $this->safe_list($response, 't', array());
            $ohlcvs = array();
            for ($i = 0; $i < count($openList); $i++) {
                $ohlcvs[] = [
                    $timestampList[$i],
                    $openList[$i],
                    $highList[$i],
                    $lastList[$i],
                    $closeList[$i],
                    $volumeList[$i],
                ];
            }
            return $this->parse_ohlcvs($ohlcvs, $market, $timeframe, $since, $limit);
        }) ();
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $limit, $params) {
            /**
             * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data for multiple markets
             * @see https://api-docs.wallex.ir/#be8d9c51a2
             * @param {string[]|null} symbols list of unified $market symbols, all symbols fetched if null, default is null
             * @param {int} [$limit] max number of entries per orderbook to return, default is null
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market $symbol
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $response = Async\await($this->publicGetV1Depth ($request));
            $orderBook = $this->safe_dict($response, 'result', array());
            $timestamp = Date.now ();
            return $this->parse_order_book($orderBook, $symbol, $timestamp, 'bid', 'ask', 'price', 'quantity');
        }) ();
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $query = $this->omit($params, $this->extract_params($path));
        $url = $this->urls['api']['public'] . '/' . $path;
        if ($path === 'v1/udf/history') {
            $url = $url . '?' . $this->urlencode($query);
        }
        if ($path === 'v1/depth') {
            $url = $url . '?' . $this->urlencode($query);
        }
        $headers = array( 'Content-Type' => 'application/json' );
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
