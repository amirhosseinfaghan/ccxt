<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\abstract\ubitex as Exchange;

class ubitex extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'ubitex',
            'name' => 'Ubitex',
            'country' => array( 'IR' ),
            'rateLimit' => 1000,
            'version' => '1',
            'certified' => false,
            'pro' => false,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'cancelAllOrders' => false,
                'cancelOrder' => false,
                'cancelOrders' => false,
                'createDepositAddress' => false,
                'createOrder' => false,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'editOrder' => false,
                'fetchBalance' => false,
                'fetchBorrowInterest' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchClosedOrders' => false,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => false,
                'fetchDepositAddress' => false,
                'fetchDeposits' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedBorrowRate' => false,
                'fetchIsolatedBorrowRates' => false,
                'fetchL2OrderBook' => false,
                'fetchLedger' => false,
                'fetchLedgerEntry' => false,
                'fetchLeverageTiers' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => false,
                'fetchOHLCV' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => false,
                'fetchOrder' => false,
                'fetchOrderBook' => true,
                'fetchOrders' => false,
                'fetchOrderTrades' => 'emulated',
                'fetchPositions' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => false,
                'fetchTrades' => false,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchWithdrawals' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'comment' => 'This comment is optional',
            'urls' => array(
                'logo' => 'https://ubitex.io/_next/image?url=https%3A%2F%2Fipfs.ubitex.io%2Fipfs%2FQmNqYsDFS1GoEeVYsPHkp8lFkodFeKo5cXLQlt1suO3T&w=256&q=75',
                'api' => array(
                    'public' => 'https://appapi.ubitex.io',
                ),
                'www' => 'https://ubitex.io/',
                'doc' => array(
                    'https://ubitex.io/',
                ),
            ),
            'timeframes' => array(
                '1m' => '1',
                '1h' => '60',
                '1d' => '1D',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'api/dashboard/PairList' => 1,
                        'api/chart/history' => 1,
                        'api/dashboard' => 1,
                    ),
                ),
            ),
            'commonCurrencies' => array(
                'TMN' => 'IRT',
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => $this->parse_number('0.001'),
                    'taker' => $this->parse_number('0.001'),
                ),
            ),
        ));
    }

    public function fetch_markets(?array $symbols = null, $params = array ()): array {
        /**
         * retrieves data on all markets for ubitex
         * @see https://ubitex.io/
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} an array of objects representing $market data
         */
        $response = $this->publicGetApiDashboardPairList ($params);
        $result = array();
        for ($i = 0; $i < count($response); $i++) {
            $market = $this->parse_market($response[$i]);
            $result[] = $market;
        }
        return $result;
    }

    public function parse_market($market): array {
        // array(
        // $id => "4c0f8205-e8af-42ec-8399-f8fcef4d3dfc",
        // selected => false,
        // destinationCoinSymbol => "SLP",
        // destinationCoinName => "SLP",
        // destinationCoinNameFa => "اس ال پی",
        // sourceCoinSymbol => "TMN",
        // sourceCoinName => "TMN",
        // sourceCoinNameFa => "تومان",
        // bestBuy => 221.82,
        // bestSell => 230.8,
        // isFavorite => false,
        // increased => true,
        // change => -1.48,
        // decimalLength => 2,
        // sourceCoinIcon => "https://cdn.ubitex.io/static/uploads/2022/1/4f96a35c-c234-454b-9e9c-d32f98149bdb.svg",
        // destinationIcon => "https://cdn.ubitex.io/static/uploads/2022/1/fe92b313-766c-4ca6-8c80-2a9101b89767.svg",
        // destinationCategoryName => "NFT",
        // destinationCategorySymbol => "NFT",
        // destinationCategoryId => "5afbccd9-cdb1-470c-84e3-57e8917a925a",
        // isLeverageToken => false,
        // active => false,
        // lowestRecentOrder => 219.5985,
        // highestRecentOrder => 232.274,
        // todayTradeAmount => 2015932.1165,
        // todayTradeTotal => 0,
        // lastOrderPrice => 229.47,
        // buyersDepth => 0,
        // sellersDepth => 0,
        // coinDecimalLength => 4,
        // globalPrice => 0.003916,
        // platform => "Kucoin"
        // ),
        $id = $this->safe_string($market, 'id');
        $baseId = $this->safe_string($market, 'destinationCoinSymbol');
        $quoteId = $this->safe_string($market, 'sourceCoinSymbol');
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $baseId = strtolower($baseId);
        $quoteId = strtolower($quoteId);
        return array(
            'id' => $id,
            'symbol' => $base . '/' . $quote,
            'base' => $base,
            'quote' => $quote,
            'settle' => null,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => null,
            'type' => 'spot',
            'spot' => true,
            'margin' => false,
            'swap' => false,
            'future' => false,
            'option' => false,
            'active' => true,
            'contract' => false,
            'linear' => null,
            'inverse' => null,
            'contractSize' => null,
            'expiry' => null,
            'expiryDatetime' => null,
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => null,
                'price' => null,
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => null,
                    'max' => null,
                ),
                'amount' => array(
                    'min' => null,
                    'max' => null,
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
            'created' => null,
            'info' => $market,
        );
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): array {
        /**
         * fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
         * @see https://ubitex.io/
         * @param {string[]|null} $symbols unified $symbols of the markets to fetch the $ticker for, all market tickers are returned if not assigned
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structures~
         */
        $this->load_markets();
        if ($symbols !== null) {
            $symbols = $this->market_symbols($symbols);
        }
        $response = $this->publicGetApiDashboardPairList ($params);
        $result = array();
        for ($i = 0; $i < count($response); $i++) {
            $ticker = $this->parse_ticker($response[$i]);
            $symbol = $ticker['symbol'];
            $result[$symbol] = $ticker;
        }
        return $this->filter_by_array_tickers($result, 'symbol', $symbols);
    }

    public function fetch_ticker(string $symbol, $params = array ()): array {
        /**
         * fetches a price $ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
         * @see https://ubitex.io/
         * @param {string} $symbol unified $symbol of the $market to fetch the $ticker for
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'src' => $this->safe_string_upper($market, 'quoteId'),
            'dest' => $this->safe_string_upper($market, 'baseId'),
        );
        $response = $this->publicGetApiDashboardPairList ($request);
        $pair = $this->safe_dict($response, 0);
        $ticker = $this->parse_ticker($pair);
        return $ticker;
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        // array(
        // id => "4c0f8205-e8af-42ec-8399-f8fcef4d3dfc",
        // selected => false,
        // destinationCoinSymbol => "SLP",
        // destinationCoinName => "SLP",
        // destinationCoinNameFa => "اس ال پی",
        // sourceCoinSymbol => "TMN",
        // sourceCoinName => "TMN",
        // sourceCoinNameFa => "تومان",
        // bestBuy => 221.82,
        // bestSell => 230.8,
        // isFavorite => false,
        // increased => true,
        // $change => -1.48,
        // decimalLength => 2,
        // sourceCoinIcon => "https://cdn.ubitex.io/static/uploads/2022/1/4f96a35c-c234-454b-9e9c-d32f98149bdb.svg",
        // destinationIcon => "https://cdn.ubitex.io/static/uploads/2022/1/fe92b313-766c-4ca6-8c80-2a9101b89767.svg",
        // destinationCategoryName => "NFT",
        // destinationCategorySymbol => "NFT",
        // destinationCategoryId => "5afbccd9-cdb1-470c-84e3-57e8917a925a",
        // isLeverageToken => false,
        // active => false,
        // lowestRecentOrder => 219.5985,
        // highestRecentOrder => 232.274,
        // todayTradeAmount => 2015932.1165,
        // todayTradeTotal => 0,
        // lastOrderPrice => 229.47,
        // buyersDepth => 0,
        // sellersDepth => 0,
        // coinDecimalLength => 4,
        // globalPrice => 0.003916,
        // platform => "Kucoin"
        // ),
        $marketType = 'spot';
        $marketId = $this->safe_string($ticker, 'id');
        $symbol = $this->safe_symbol($marketId, $market, null, $marketType);
        $high = $this->safe_float($ticker, 'highestRecentOrder', 0);
        $low = $this->safe_float($ticker, 'lowestRecentOrder', 0);
        $bid = $this->safe_float($ticker, 'bestBuy', 0);
        $ask = $this->safe_float($ticker, 'bestSell', 0);
        $last = $this->safe_float($ticker, 'lastOrderPrice', 0);
        $change = $this->safe_float($ticker, 'change', 0);
        $baseVolume = $this->safe_float($ticker, 'todayTradeAmount', 0);
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => null,
            'datetime' => null,
            'high' => $high,
            'low' => $low,
            'bid' => $bid,
            'bidVolume' => null,
            'ask' => $ask,
            'askVolume' => null,
            'vwap' => null,
            'open' => $last,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => $change,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => null,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = null, ?int $limit = 100, $params = array ()): array {
        /**
         * fetches historical candlestick data containing the open, high, low, and close price, and the volume of a $market
         * @see https://ubitex.io/
         * @param {string} $symbol unified $symbol of the $market to fetch OHLCV data for
         * @param {string} $timeframe the length of time each candle represents
         * @param {int} [$since] timestamp in ms of the earliest candle to fetch
         * @param {int} [$limit] the maximum amount of candles to fetch
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {int[][]} A list of candles ordered, open, high, low, close, volume
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $endTime = Date.now ();
        $request = array(
            'symbol' => $market['base'] . $market['quote'],
            'from' => ($endTime / 1000) - (24 * 60 * 60),
            'to' => $endTime / 1000,
            'resolution' => $this->safe_string($this->timeframes, $timeframe, $timeframe),
            'countback' => $limit,
        );
        if ($market['quote'] === 'IRT') {
            $request['symbol'] = $market['base'] . 'TMN';
        }
        if ($since !== null) {
            $request['from'] = $since / 1000;
        }
        $request['from'] = $this->safe_integer($request, 'from');
        $request['to'] = $this->safe_integer($request, 'to');
        if ($timeframe !== null) {
            $request['resolution'] = $this->safe_string($this->timeframes, $timeframe, $timeframe);
        }
        $response = $this->publicGetApiChartHistory ($request);
        $openList = $this->safe_value($response, 'o', array());
        $highList = $this->safe_list($response, 'h', array());
        $lastList = $this->safe_list($response, 'l', array());
        $closeList = $this->safe_list($response, 'c', array());
        $volumeList = $this->safe_list($response, 'v', array());
        $timestampList = $this->safe_list($response, 't', array());
        $ohlcvs = array();
        for ($i = 0; $i < count($openList); $i++) {
            $ohlcvs[] = [
                $timestampList[$i],
                $openList[$i],
                $highList[$i],
                $lastList[$i],
                $closeList[$i],
                $volumeList[$i],
            ];
        }
        return $this->parse_ohlcvs($ohlcvs, $market, $timeframe, $since, $limit);
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()): array {
        /**
         * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data for multiple markets
         * @see https://ubitex.io/
         * @param {string[]|null} symbols list of unified $market symbols, all symbols fetched if null, default is null
         * @param {int} [$limit] max number of entries per orderbook to return, default is null
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market $symbol
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'id' => $market['id'],
        );
        $orderBook = $this->publicGetApiDashboard ($request);
        $timestamp = Date.now ();
        return $this->parse_order_book($orderBook, $symbol, $timestamp, 'buyers', 'sellers', 'price', 'totalAmount');
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $query = $this->omit($params, $this->extract_params($path));
        $url = $this->urls['api']['public'] . '/' . $path;
        if ($params['src'] !== null && $params['dest'] !== null) {
            $url = $url . '?' . $this->urlencode($query);
        }
        if ($path === 'api/dashboard') {
            $url = $url . '/' . $params['id'] . '/market';
        }
        if ($path === 'api/chart/history') {
            $url = $url . '?' . $this->urlencode($query);
        }
        $headers = array( 'Content-Type' => 'application/json' );
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
