<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\abstract\exnovin as Exchange;

class exnovin extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'exnovin',
            'name' => 'Exnovin',
            'country' => array( 'IR' ),
            'rateLimit' => 1000,
            'version' => '1',
            'certified' => false,
            'pro' => false,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'cancelAllOrders' => false,
                'cancelOrder' => false,
                'cancelOrders' => false,
                'createDepositAddress' => false,
                'createOrder' => false,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'editOrder' => false,
                'fetchBalance' => false,
                'fetchBorrowInterest' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchClosedOrders' => false,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => false,
                'fetchDepositAddress' => false,
                'fetchDeposits' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedBorrowRate' => false,
                'fetchIsolatedBorrowRates' => false,
                'fetchL2OrderBook' => false,
                'fetchLedger' => false,
                'fetchLedgerEntry' => false,
                'fetchLeverageTiers' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => false,
                'fetchOHLCV' => false,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => false,
                'fetchOrder' => false,
                'fetchOrderBook' => true,
                'fetchOrders' => false,
                'fetchOrderTrades' => 'emulated',
                'fetchPositions' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => false,
                'fetchTrades' => false,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchWithdrawals' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'comment' => 'This comment is optional',
            'urls' => array(
                'logo' => 'https://cdn.arz.digital/cr-odin/img/exchanges/exnovin/64x64.png',
                'api' => array(
                    'public' => 'https://api.exnovinmarket.com',
                ),
                'www' => 'https://exnovin.io',
                'doc' => array(
                    'https://exnovin.io/',
                ),
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'v2/pairs' => 1,
                        'v1/orderbook' => 1,
                    ),
                ),
            ),
            'commonCurrencies' => array(
                'TMN' => 'IRT',
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => $this->parse_number('0.001'),
                    'taker' => $this->parse_number('0.001'),
                ),
            ),
        ));
    }

    public function fetch_markets(?array $symbols = null, $params = array ()): array {
        /**
         * retrieves data on all markets for exnovin
         * @see https://exnovin.io/
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} an array of objects representing $market data
         */
        $response = $this->publicGetV2Pairs ();
        $result = array();
        for ($i = 0; $i < count($response); $i++) {
            $market = $this->parse_market($response[$i]);
            $result[] = $market;
        }
        return $result;
    }

    public function parse_market($market): array {
        //         {
        // lastPrice => 214715147,
        // name => "ETH/TMN",
        // tradeAmountDecimals => 6,
        // priceDecimals => 0,
        // maxVariationRatio => "5.00",
        // minCost => "100000",
        // high24 => 214755000,
        // low24 => 203102000,
        // vol24 => 440913246,
        // vol24Base => 2.112867,
        // change24Percentage => 3.4,
        // lastWeekPrices => array(
        // 214715000,
        // 206934000,
        // 216552000,
        // 217787000,
        // 216443000,
        // 216832000,
        // 222969000,
        // 225776000
        // ),
        // localeName => "ETH/TMN",
        // zones => array(
        // array(
        // $id => "d4eeb449-7d91-4cae-ad3b-f8b1ef376d1d",
        // label => "Toman",
        // name => "TMN"
        // }
        // ),
        // imageUrl => "https://api.exnovinmarket.com/static-contents/images/icons/d22722b936d9409f9f9b15c7a5a07046.svg",
        // active => true
        // ),
        $id = $this->safe_string($market, 'name');
        list($baseId, $quoteId) = explode('/', $id);
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $baseId = strtolower($baseId);
        $quoteId = strtolower($quoteId);
        return array(
            'id' => $id,
            'symbol' => $base . '/' . $quote,
            'base' => $base,
            'quote' => $quote,
            'settle' => null,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => null,
            'type' => 'spot',
            'spot' => true,
            'margin' => false,
            'swap' => false,
            'future' => false,
            'option' => false,
            'active' => true,
            'contract' => false,
            'linear' => null,
            'inverse' => null,
            'contractSize' => null,
            'expiry' => null,
            'expiryDatetime' => null,
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => null,
                'price' => null,
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => null,
                    'max' => null,
                ),
                'amount' => array(
                    'min' => null,
                    'max' => null,
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
            'created' => null,
            'info' => $market,
        );
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): array {
        /**
         * fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
         * @see https://exnovin.io/
         * @param {string[]|null} $symbols unified $symbols of the markets to fetch the $ticker for, all market tickers are returned if not assigned
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structures~
         */
        $this->load_markets();
        if ($symbols !== null) {
            $symbols = $this->market_symbols($symbols);
        }
        $response = $this->publicGetV2Pairs ($params);
        $result = array();
        for ($i = 0; $i < count($response); $i++) {
            $ticker = $this->parse_ticker($response[$i]);
            $symbol = $ticker['symbol'];
            $result[$symbol] = $ticker;
        }
        return $this->filter_by_array_tickers($result, 'symbol', $symbols);
    }

    public function fetch_ticker(string $symbol, $params = array ()): array {
        /**
         * fetches a price $ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @see https://exnovin.io/
         * @param {string} $symbol unified $symbol of the market to fetch the $ticker for
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structure~
         */
        $ticker = $this->fetch_tickers(array( $symbol ));
        return $ticker[$symbol];
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        //         {
        // lastPrice => 214715147,
        // name => "ETH/TMN",
        // tradeAmountDecimals => 6,
        // priceDecimals => 0,
        // maxVariationRatio => "5.00",
        // minCost => "100000",
        // high24 => 214755000,
        // low24 => 203102000,
        // vol24 => 440913246,
        // vol24Base => 2.112867,
        // change24Percentage => 3.4,
        // lastWeekPrices => array(
        // 214715000,
        // 206934000,
        // 216552000,
        // 217787000,
        // 216443000,
        // 216832000,
        // 222969000,
        // 225776000
        // ),
        // localeName => "ETH/TMN",
        // zones => array(
        // array(
        // id => "d4eeb449-7d91-4cae-ad3b-f8b1ef376d1d",
        // label => "Toman",
        // name => "TMN"
        // }
        // ),
        // imageUrl => "https://api.exnovinmarket.com/static-contents/images/icons/d22722b936d9409f9f9b15c7a5a07046.svg",
        // active => true
        // ),
        $marketType = 'spot';
        $marketId = $this->safe_string($ticker, 'name');
        $symbol = $this->safe_symbol($marketId, $market, null, $marketType);
        $high = $this->safe_float($ticker, 'high24', 0);
        $low = $this->safe_float($ticker, 'low24', 0);
        $last = $this->safe_float($ticker, 'lastPrice', 0);
        $change = $this->safe_float($ticker, 'change24Percentage', 0);
        $baseVolume = $this->safe_float($ticker, 'vol24Base', 0);
        $quoteVolume = $this->safe_float($ticker, 'vol24', 0);
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => null,
            'datetime' => null,
            'high' => $high,
            'low' => $low,
            'bid' => null,
            'bidVolume' => null,
            'ask' => null,
            'askVolume' => null,
            'vwap' => null,
            'open' => $last,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => $change,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()): array {
        /**
         * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data for multiple markets
         * @see https://exnovin.io/
         * @param {string[]|null} symbols list of unified $market symbols, all symbols fetched if null, default is null
         * @param {int} [$limit] max number of entries per orderbook to return, default is null
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market $symbol
         */
        //         array(
        // price => "59034.0000000000",
        // amount => "128.0200000000",
        // pair => "USDT/TMN",
        // side => "BUY"
        // ),
        // array(
        // price => "59032.0000000000",
        // amount => "461.1300000000",
        // pair => "USDT/TMN",
        // side => "BUY"
        // ),
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'pair' => $market['id'],
            'limit' => 30,
        );
        $orderBook = $this->publicGetV1Orderbook ($request);
        $bids = array();
        $asks = array();
        for ($index = 0; $index < count($orderBook); $index++) {
            if ($orderBook[$index]['side'] === 'BUY') {
                $bids[] = $orderBook[$index];
            } else {
                $asks[] = $orderBook[$index];
            }
        }
        $orderBook = array( 'bids' => $bids, 'asks' => $asks );
        $timestamp = Date.now ();
        return $this->parse_order_book($orderBook, $symbol, $timestamp, 'bids', 'asks', 'price', 'amount');
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $query = $this->omit($params, $this->extract_params($path));
        $url = $this->urls['api']['public'] . '/' . $path . '?' . $this->urlencode($query);
        $headers = array( 'Content-Type' => 'application/json' );
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
